{"ast":null,"code":"import _asyncToGenerator from \"/Users/advityasood/jude_anyft/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nfunction serializeError(error) {\n  return error.toString();\n}\n\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\n\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\n\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\n\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\n\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (req, res, next, end) {\n      // nextPromise is the key to the implementation\n      // it is resolved by the return handler passed to the\n      // \"next\" function\n      let resolveNextPromise;\n      const nextPromise = new Promise(resolve => {\n        resolveNextPromise = resolve;\n      });\n      let returnHandlerCallback = null;\n      let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n      const asyncNext = /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* () {\n          nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n          // the consumer's async middleware will resume executing.\n\n          next(runReturnHandlersCallback => {\n            // This callback comes from JRPCEngine._runReturnHandlers\n            returnHandlerCallback = runReturnHandlersCallback;\n            resolveNextPromise();\n          });\n          yield nextPromise;\n        });\n\n        return function asyncNext() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n\n      try {\n        yield asyncMiddleware(req, res, asyncNext);\n\n        if (nextWasCalled) {\n          yield nextPromise; // we must wait until the return handler is called\n\n          returnHandlerCallback(null);\n        } else {\n          end(null);\n        }\n      } catch (error) {\n        if (returnHandlerCallback) {\n          returnHandlerCallback(error);\n        } else {\n          end(error);\n        }\n      }\n    });\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static _runAllMiddleware(req, res, middlewareStack) {\n    return _asyncToGenerator(function* () {\n      const returnHandlers = [];\n      let error = null;\n      let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n      for (const middleware of middlewareStack) {\n        [error, isComplete] = yield JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n        if (isComplete) {\n          break;\n        }\n      }\n\n      return [error, isComplete, returnHandlers.reverse()];\n    })();\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static _runReturnHandlers(handlers) {\n    return _asyncToGenerator(function* () {\n      for (const handler of handlers) {\n        yield new Promise((resolve, reject) => {\n          handler(err => err ? reject(err) : resolve());\n        });\n      }\n    })();\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    var _this = this;\n\n    return /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(function* (req, res, next, end) {\n        try {\n          const [middlewareError, isComplete, returnHandlers] = yield JRPCEngine._runAllMiddleware(req, res, _this._middleware);\n\n          if (isComplete) {\n            yield JRPCEngine._runReturnHandlers(returnHandlers);\n            return end(middlewareError);\n          }\n\n          return next( /*#__PURE__*/function () {\n            var _ref5 = _asyncToGenerator(function* (handlerCallback) {\n              try {\n                yield JRPCEngine._runReturnHandlers(returnHandlers);\n              } catch (error) {\n                return handlerCallback(error);\n              }\n\n              return handlerCallback();\n            });\n\n            return function (_x9) {\n              return _ref5.apply(this, arguments);\n            };\n          }());\n        } catch (error) {\n          return end(error);\n        }\n      });\n\n      return function (_x5, _x6, _x7, _x8) {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n  }\n\n  _handleBatch(reqs, cb) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // The order here is important\n      try {\n        // 2. Wait for all requests to finish, or throw on some kind of fatal\n        // error\n        const responses = yield Promise.all( // 1. Begin executing each request in the order received\n        reqs.map(_this2._promiseHandle.bind(_this2))); // 3. Return batch response\n\n        if (cb) {\n          return cb(null, responses);\n        }\n\n        return responses;\n      } catch (error) {\n        if (cb) {\n          return cb(error);\n        }\n\n        throw error;\n      }\n    })();\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  _handle(callerReq, cb) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n        const error = new SerializableError({\n          code: -32603,\n          message: \"request must be plain object\"\n        });\n        return cb(error, {\n          id: undefined,\n          jsonrpc: \"2.0\",\n          error\n        });\n      }\n\n      if (typeof callerReq.method !== \"string\") {\n        const error = new SerializableError({\n          code: -32603,\n          message: \"method must be string\"\n        });\n        return cb(error, {\n          id: callerReq.id,\n          jsonrpc: \"2.0\",\n          error\n        });\n      }\n\n      const req = _objectSpread$1({}, callerReq);\n\n      const res = {\n        id: req.id,\n        jsonrpc: req.jsonrpc\n      };\n      let error = null;\n\n      try {\n        yield _this3._processRequest(req, res);\n      } catch (_error) {\n        // A request handler error, a re-thrown middleware error, or something\n        // unexpected.\n        error = _error;\n      }\n\n      if (error) {\n        // Ensure no result is present on an errored response\n        delete res.result;\n\n        if (!res.error) {\n          res.error = serializeError(error);\n        }\n      }\n\n      return cb(error, res);\n    })();\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  _processRequest(req, res) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const [error, isComplete, returnHandlers] = yield JRPCEngine._runAllMiddleware(req, res, _this4._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n      // nor an error.\n\n      JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n      // middleware processing.\n\n\n      yield JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n      // further up the call chain.\n\n      if (error) {\n        throw error;\n      }\n    })();\n  }\n\n}\n\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, serializeError, setupMultiplex };","map":{"version":3,"sources":["/Users/advityasood/jude_anyft/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js"],"names":["_defineProperty","Duplex","randomId","EventEmitter","stringify","eos","once","pump","noop","undefined","SYN","ACK","BRK","BasePostMessageStream","constructor","_ref","name","target","targetWindow","window","targetOrigin","objectMode","Error","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","data","uncork","push","err","emit","_postMessage","originConstraint","postMessage","event","message","origin","source","_read","_","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","arrayClone","arr","n","length","copy","Array","i","SafeEventEmitter","type","doError","events","_events","error","_len","arguments","_key","er","concat","len","listeners","SerializableError","code","Number","isInteger","toString","stack","serializeError","getRpcPromiseCallback","resolve","reject","unwrapResult","response","isArray","result","createErrorMiddleware","log","req","res","next","end","method","done","createStreamMiddleware","idMap","readNoop","processResponse","id","Object","assign","processNotification","processMessage","_encoding","isNotification","_err","stream","read","write","middleware","createScaffoldMiddleware","handlers","createIdRemapMiddleware","_end","originalId","newId","createLoggerMiddleware","logger","debug","createAsyncMiddleware","asyncMiddleware","resolveNextPromise","nextPromise","Promise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","ownKeys$1","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","_objectSpread$1","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","JRPCEngine","_middleware","_runAllMiddleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","returnHandler","_runReturnHandlers","_checkForCompletion","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","middlewareError","handlerCallback","reqs","responses","all","map","callerReq","jsonrpc","_processRequest","_error","mergeMiddleware","engine","createEngineStream","opts","on","Substream","parent","_parent","chunk","callback","ownKeys","_objectSpread","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_substreams","createStream","substream","anyStreamEnd","destroy","ignoreStream","console","warn","_cb","readable","writable","setupMultiplex","mux","getStream","streamHelper","PostMessageStream","dataObj","dataObjData","params","dataObjDataParam","_origin","location"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends Duplex {\n  constructor(_ref) {\n    let {\n      name,\n      target,\n      targetWindow = window,\n      targetOrigin = \"*\"\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_init\", void 0);\n\n    _defineProperty(this, \"_haveSyn\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    _defineProperty(this, \"_target\", void 0);\n\n    _defineProperty(this, \"_targetWindow\", void 0);\n\n    _defineProperty(this, \"_targetOrigin\", void 0);\n\n    _defineProperty(this, \"_onMessage\", void 0);\n\n    _defineProperty(this, \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n    window.addEventListener(\"message\", this._onMessage, false);\n\n    this._handShake();\n  }\n\n  _break() {\n    this.cork();\n\n    this._write(BRK, null, noop);\n\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake() {\n    this._write(SYN, null, noop);\n\n    this.cork();\n  }\n\n  _onData(data) {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data) {\n    const originConstraint = this._targetOrigin;\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n  onMessage(event) {\n    const message = event.data; // validate message\n\n    if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(data, _, cb) {\n    this._postMessage(data);\n\n    cb();\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n\n}\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  const n = arr.length;\n  const copy = new Array(n);\n\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nclass SafeEventEmitter extends EventEmitter {\n  emit(type) {\n    let doError = type === \"error\";\n    const events = this._events;\n\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    } // If there is no 'error' event listener then throw.\n\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (doError) {\n      let er;\n\n      if (args.length > 0) {\n        [er] = args;\n      }\n\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      } // At least give some kind of context to the user\n\n\n      const err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n      err.context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n\n}\n\nclass SerializableError extends Error {\n  constructor(_ref) {\n    let {\n      code,\n      message,\n      data\n    } = _ref;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n\n    _defineProperty(this, \"code\", void 0);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString() {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack\n    });\n  }\n\n}\n\nfunction serializeError(error) {\n  return error.toString();\n}\nconst getRpcPromiseCallback = function (resolve, reject) {\n  let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return (error, response) => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\nfunction createErrorMiddleware(log) {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(done => {\n        const {\n          error\n        } = res;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\nfunction createStreamMiddleware() {\n  const idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    const context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    let err;\n\n    try {\n      const isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  const middleware = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req,\n      res,\n      next,\n      end\n    };\n  };\n\n  return {\n    events,\n    middleware,\n    stream\n  };\n}\nfunction createScaffoldMiddleware(handlers) {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\nfunction createIdRemapMiddleware() {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(done => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\nfunction createLoggerMiddleware(logger) {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback = null;\n    let nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n    const asyncNext = async () => {\n      nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next(runReturnHandlersCallback => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\nclass JRPCEngine extends SafeEventEmitter {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"_middleware\", void 0);\n\n    this._middleware = [];\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  static async _runAllMiddleware(req, res, middlewareStack) {\n    const returnHandlers = [];\n    let error = null;\n    let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n      if (isComplete) {\n        break;\n      }\n    }\n\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({\n                code: -32603,\n                message: \"JRPCEngine: 'next' return handlers must be functions\"\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n\n\n  static async _runReturnHandlers(handlers) {\n    for (const handler of handlers) {\n      await new Promise((resolve, reject) => {\n        handler(err => err ? reject(err) : resolve());\n      });\n    }\n  }\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Response has no error or result for request\"\n      });\n    }\n\n    if (!isComplete) {\n      throw new SerializableError({\n        code: -32603,\n        message: \"Nothing ended request\"\n      });\n    }\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n\n\n  asMiddleware() {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError);\n        }\n\n        return next(async handlerCallback => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  async _handleBatch(reqs, cb) {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all( // 1. Begin executing each request in the order received\n      reqs.map(this._promiseHandle.bind(this))); // 3. Return batch response\n\n      if (cb) {\n        return cb(null, responses);\n      }\n\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n  /**\n   * A promise-wrapped _handle.\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n\n\n  async _handle(callerReq, cb) {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"request must be plain object\"\n      });\n      return cb(error, {\n        id: undefined,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({\n        code: -32603,\n        message: \"method must be string\"\n      });\n      return cb(error, {\n        id: callerReq.id,\n        jsonrpc: \"2.0\",\n        error\n      });\n    }\n\n    const req = _objectSpread$1({}, callerReq);\n\n    const res = {\n      id: req.id,\n      jsonrpc: req.jsonrpc\n    };\n    let error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res);\n  }\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n\n\n  async _processRequest(req, res) {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n\n    JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n    // middleware processing.\n\n\n    await JRPCEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n\n    if (error) {\n      throw error;\n    }\n  }\n\n}\nfunction mergeMiddleware(middlewareStack) {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach(middleware => engine.push(middleware));\n  return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const {\n    engine\n  } = opts; // eslint-disable-next-line prefer-const\n\n  let stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read,\n    write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", message => {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nclass Substream extends Duplex {\n  constructor(_ref) {\n    let {\n      parent,\n      name\n    } = _ref;\n    super({\n      objectMode: true\n    });\n\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_name\", void 0);\n\n    this._parent = parent;\n    this._name = name;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _read() {\n    return undefined;\n  }\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n\n\n  _write(chunk, _encoding, callback) {\n    this._parent.push({\n      name: this._name,\n      data: chunk\n    });\n\n    callback();\n  }\n\n}\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends Duplex {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(_objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(this, \"_substreams\", void 0);\n\n    _defineProperty(this, \"getStream\", void 0);\n\n    this._substreams = {};\n  }\n\n  createStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // create substream\n\n\n    const substream = new Substream({\n      parent: this,\n      name\n    });\n    this._substreams[name] = substream; // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n    anyStreamEnd(this, _error => substream.destroy(_error || undefined));\n    return substream;\n  } // ignore streams (dont display orphaned data warning)\n\n\n  ignoreStream(name) {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n    } // set\n\n\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read() {\n    return undefined;\n  }\n\n  _write(chunk, _encoding, callback) {\n    const {\n      name,\n      data\n    } = chunk;\n\n    if (!name) {\n      window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n      return callback();\n    } // get corresponding substream\n\n\n    const substream = this._substreams[name];\n\n    if (!substream) {\n      window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n      return callback();\n    } // push data into substream\n\n\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n\n} // util\n\nfunction anyStreamEnd(stream, _cb) {\n  const cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  const mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, err => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nclass PostMessageStream extends BasePostMessageStream {\n  _postMessage(data) {\n    let originConstraint = this._targetOrigin;\n\n    if (typeof data === \"object\") {\n      const dataObj = data;\n\n      if (typeof dataObj.data === \"object\") {\n        const dataObjData = dataObj.data;\n\n        if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n          const dataObjDataParam = dataObjData.params[0];\n\n          if (dataObjDataParam._origin) {\n            originConstraint = dataObjDataParam._origin;\n          } // add a constraint for the response\n\n\n          dataObjDataParam._origin = window.location.origin;\n        }\n      }\n    }\n\n    this._targetWindow.postMessage({\n      target: this._target,\n      data\n    }, originConstraint);\n  }\n\n}\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, serializeError, setupMultiplex };\n"]},"metadata":{},"sourceType":"module"}