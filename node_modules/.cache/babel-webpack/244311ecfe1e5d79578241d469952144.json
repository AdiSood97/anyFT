{"ast":null,"code":"import _asyncToGenerator from \"/Users/advityasood/jude_anyft/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from 'web3';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport { Subject } from 'rxjs'; // const Fortmatic = window.Fortmatic;\n\nimport { nftMarketContract, nftMarketabi } from '../../nftmarket';\nimport { NFTContract, NFTabi } from '../../NFT';\nimport * as i0 from \"@angular/core\";\nexport class ContractService {\n  constructor() {\n    this.accountStatusSource = new Subject();\n    this.accountStatus$ = this.accountStatusSource.asObservable();\n    const providerOptions = {\n      walletconnect: {\n        // display: {\n        //     name: \"Mobile\"\n        //   },\n        package: WalletConnectProvider,\n        options: {\n          infuraId: 'INFURA_ID' // required\n\n        }\n      }\n    };\n    this.web3Modal = new Web3Modal({\n      network: 'mainnet',\n      cacheProvider: true,\n      providerOptions,\n      theme: {\n        background: 'rgb(39, 49, 56)',\n        main: 'rgb(199, 199, 199)',\n        secondary: 'rgb(136, 136, 136)',\n        border: 'rgba(195, 195, 195, 0.14)',\n        hover: 'rgb(16, 26, 32)'\n      }\n    });\n  }\n\n  connectAccount() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log('inside service');\n\n      _this.web3Modal.clearCachedProvider();\n\n      _this.provider = yield _this.web3Modal.connect(); // set provider\n\n      _this.web3js = new Web3(_this.provider); // create web3 instance\n\n      _this.accounts = yield _this.web3js.eth.getAccounts();\n      console.log(_this.accounts, 'accounts');\n\n      _this.accountStatusSource.next(_this.accounts);\n    })();\n  }\n\n  getAccount() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.accounts = _this2.web3js.eth.getAccounts();\n      return _this2.accounts;\n    })();\n  } //List Token on The MarketPlace\n\n\n  createMarketItem(nftContract, tokenId, price) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.provider = yield _this3.web3Modal.connect(); // set provider\n\n      _this3.web3js = new Web3(_this3.provider); // create web3 instance\n\n      _this3.accounts = yield _this3.web3js.eth.getAccounts();\n      _this3.nftmarket = new _this3.web3js.eth.Contract(nftMarketabi, nftMarketContract); // price = this.web3js.utils.toWei('0.025', 'ether'); \n\n      price = _this3.web3js.utils.parseUnits(price, 'ether');\n      tokenId = tokenId.toNumber();\n      let contract = new _this3.web3js.Contract(nftMarketabi, nftMarketContract);\n      let listingPrice = yield contract.getListingPrice();\n      console.log('listing', listingPrice);\n      listingPrice = listingPrice.toString();\n      const createMarketItem = yield _this3.nftmarket.methods.createMarketItem(nftContract, tokenId, price).send({\n        from: _this3.accounts[0]\n      });\n      return createMarketItem;\n    })();\n  }\n\n  createMarketSale(nftContract, itemId) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.provider = yield _this4.web3Modal.connect(); // set provider\n\n      _this4.web3js = new Web3(_this4.provider); // create web3 instance\n\n      _this4.accounts = yield _this4.web3js.eth.getAccounts();\n      _this4.nftmarket = new _this4.web3js.eth.contract(nftMarketContract, nftMarketabi);\n      const createMarketSale = yield _this4.nftmarket.methods.createMarketSale().send({\n        from: _this4.accounts[0]\n      });\n      return createMarketSale;\n    })();\n  } //Fetch my NFTs on the marketplace\n\n\n  fetchMyNFTs(dummy) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      _this5.provider = yield _this5.web3Modal.connect(); // set provider\n\n      _this5.web3js = new Web3(_this5.provider); // create web3 instance\n\n      _this5.accounts = yield _this5.web3js.eth.getAccounts();\n      _this5.nftmarket = new _this5.web3js.eth.Contract(nftMarketabi, nftMarketContract);\n      const fetchMyNFTs = yield _this5.nftmarket.methods.fetchMyNFTs().call({\n        from: _this5.accounts[0]\n      });\n      return fetchMyNFTs;\n    })();\n  }\n\n  fetchMarketItems() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      _this6.provider = yield _this6.web3Modal.connect(); // set provider\n\n      _this6.web3js = new Web3(_this6.provider); // create web3 instance\n\n      _this6.accounts = yield _this6.web3js.eth.getAccounts();\n      _this6.nftmarket = new _this6.web3js.eth.Contract(nftMarketabi, nftMarketContract);\n      const fetchMarketItems = yield _this6.nftmarket.methods.fetchMarketItems().call({\n        from: _this6.accounts[0]\n      });\n      return fetchMarketItems;\n    })();\n  } //Create Token\n\n\n  createToken(tokenURI) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      _this7.provider = yield _this7.web3Modal.connect(); // set provider\n\n      _this7.web3js = new Web3(_this7.provider); // create web3 instance\n\n      _this7.accounts = yield _this7.web3js.eth.getAccounts();\n      _this7.NFT = new _this7.web3js.eth.Contract(NFTabi, NFTContract);\n      const mintNFT = yield _this7.NFT.methods.createToken().send({\n        from: _this7.accounts[0]\n      });\n      return mintNFT;\n    })();\n  }\n\n  balanceOf(ownerAddress) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      _this8.provider = yield _this8.web3Modal.connect();\n      _this8.web3js = new Web3(_this8.provider);\n      _this8.accounts = yield _this8.web3js.eth.getAccounts();\n      _this8.NFT = new _this8.web3js.eth.Contract(NFTabi, NFTContract); // console.log('oA',ownerAddress)\n\n      const balance = yield _this8.NFT.methods.balanceOf(_this8.accounts[0]).call({\n        from: _this8.accounts[0]\n      });\n      return balance;\n    })();\n  }\n\n  approve(toAddress, tokenId) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      _this9.provider = yield _this9.web3Modal.connect();\n      _this9.web3js = new Web3(_this9.provider);\n      _this9.accounts = yield _this9.web3js.eth.getAccounts();\n      const approveFunction = yield _this9.NFT.methods.approve().send({\n        from: _this9.accounts[0]\n      });\n      return approveFunction;\n    })();\n  }\n\n}\n\nContractService.ɵfac = function ContractService_Factory(t) {\n  return new (t || ContractService)();\n};\n\nContractService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ContractService,\n  factory: ContractService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/advityasood/jude_anyft/src/app/services/contract.service.ts"],"names":["Web3","Web3Modal","WalletConnectProvider","Subject","nftMarketContract","nftMarketabi","NFTContract","NFTabi","i0","ContractService","constructor","accountStatusSource","accountStatus$","asObservable","providerOptions","walletconnect","package","options","infuraId","web3Modal","network","cacheProvider","theme","background","main","secondary","border","hover","connectAccount","console","log","clearCachedProvider","provider","connect","web3js","accounts","eth","getAccounts","next","getAccount","createMarketItem","nftContract","tokenId","price","nftmarket","Contract","utils","parseUnits","toNumber","contract","listingPrice","getListingPrice","toString","methods","send","from","createMarketSale","itemId","fetchMyNFTs","dummy","call","fetchMarketItems","createToken","tokenURI","NFT","mintNFT","balanceOf","ownerAddress","balance","approve","toAddress","approveFunction","ɵfac","ContractService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\nimport Web3Modal from 'web3modal';\nimport WalletConnectProvider from '@walletconnect/web3-provider';\nimport { Subject } from 'rxjs';\n// const Fortmatic = window.Fortmatic;\nimport { nftMarketContract, nftMarketabi } from '../../nftmarket';\nimport { NFTContract, NFTabi } from '../../NFT';\nimport * as i0 from \"@angular/core\";\nexport class ContractService {\n    constructor() {\n        this.accountStatusSource = new Subject();\n        this.accountStatus$ = this.accountStatusSource.asObservable();\n        const providerOptions = {\n            walletconnect: {\n                // display: {\n                //     name: \"Mobile\"\n                //   },\n                package: WalletConnectProvider,\n                options: {\n                    infuraId: 'INFURA_ID', // required\n                },\n            },\n        };\n        this.web3Modal = new Web3Modal({\n            network: 'mainnet',\n            cacheProvider: true,\n            providerOptions,\n            theme: {\n                background: 'rgb(39, 49, 56)',\n                main: 'rgb(199, 199, 199)',\n                secondary: 'rgb(136, 136, 136)',\n                border: 'rgba(195, 195, 195, 0.14)',\n                hover: 'rgb(16, 26, 32)',\n            },\n        });\n    }\n    async connectAccount() {\n        console.log('inside service');\n        this.web3Modal.clearCachedProvider();\n        this.provider = await this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = await this.web3js.eth.getAccounts();\n        console.log(this.accounts, 'accounts');\n        this.accountStatusSource.next(this.accounts);\n    }\n    async getAccount() {\n        this.accounts = this.web3js.eth.getAccounts();\n        return this.accounts;\n    }\n    //List Token on The MarketPlace\n    async createMarketItem(nftContract, tokenId, price) {\n        this.provider = await this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = await this.web3js.eth.getAccounts();\n        this.nftmarket = new this.web3js.eth.Contract(nftMarketabi, nftMarketContract);\n        // price = this.web3js.utils.toWei('0.025', 'ether'); \n        price = this.web3js.utils.parseUnits(price, 'ether');\n        tokenId = tokenId.toNumber();\n        let contract = new this.web3js.Contract(nftMarketabi, nftMarketContract);\n        let listingPrice = await contract.getListingPrice();\n        console.log('listing', listingPrice);\n        listingPrice = listingPrice.toString();\n        const createMarketItem = await this.nftmarket.methods\n            .createMarketItem(nftContract, tokenId, price)\n            .send({ from: this.accounts[0] });\n        return createMarketItem;\n    }\n    async createMarketSale(nftContract, itemId) {\n        this.provider = await this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = await this.web3js.eth.getAccounts();\n        this.nftmarket = new this.web3js.eth.contract(nftMarketContract, nftMarketabi);\n        const createMarketSale = await this.nftmarket.methods\n            .createMarketSale()\n            .send({ from: this.accounts[0] });\n        return createMarketSale;\n    }\n    //Fetch my NFTs on the marketplace\n    async fetchMyNFTs(dummy) {\n        this.provider = await this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = await this.web3js.eth.getAccounts();\n        this.nftmarket = new this.web3js.eth.Contract(nftMarketabi, nftMarketContract);\n        const fetchMyNFTs = await this.nftmarket.methods\n            .fetchMyNFTs()\n            .call({ from: this.accounts[0] });\n        return fetchMyNFTs;\n    }\n    async fetchMarketItems() {\n        this.provider = await this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = await this.web3js.eth.getAccounts();\n        this.nftmarket = new this.web3js.eth.Contract(nftMarketabi, nftMarketContract);\n        const fetchMarketItems = await this.nftmarket.methods\n            .fetchMarketItems()\n            .call({ from: this.accounts[0] });\n        return fetchMarketItems;\n    }\n    //Create Token\n    async createToken(tokenURI) {\n        this.provider = await this.web3Modal.connect(); // set provider\n        this.web3js = new Web3(this.provider); // create web3 instance\n        this.accounts = await this.web3js.eth.getAccounts();\n        this.NFT = new this.web3js.eth.Contract(NFTabi, NFTContract);\n        const mintNFT = await this.NFT.methods\n            .createToken()\n            .send({ from: this.accounts[0] });\n        return mintNFT;\n    }\n    async balanceOf(ownerAddress) {\n        this.provider = await this.web3Modal.connect();\n        this.web3js = new Web3(this.provider);\n        this.accounts = await this.web3js.eth.getAccounts();\n        this.NFT = new this.web3js.eth.Contract(NFTabi, NFTContract);\n        // console.log('oA',ownerAddress)\n        const balance = await this.NFT.methods\n            .balanceOf(this.accounts[0])\n            .call({ from: this.accounts[0] });\n        return balance;\n    }\n    async approve(toAddress, tokenId) {\n        this.provider = await this.web3Modal.connect();\n        this.web3js = new Web3(this.provider);\n        this.accounts = await this.web3js.eth.getAccounts();\n        const approveFunction = await this.NFT.methods\n            .approve()\n            .send({ from: this.accounts[0] });\n        return approveFunction;\n    }\n}\nContractService.ɵfac = function ContractService_Factory(t) { return new (t || ContractService)(); };\nContractService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ContractService, factory: ContractService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}