!function(e,t){for(var n in t)e[n]=t[n]}(this,function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";const{coinType:o,coinGroup:r,coinName:a,bitcoinTxType:i,klaytnTxType:s,xrpTxType:c}=n(1),{state:p}=n(2),{config:u}=n(3),d=n(4),T=n(5),E=n(6),l={};var f=u.timeOutMs;l.messageRequestIdx=0,l.messageResponsetIdx=0,l.popupWindow=void 0,l.popupTab=void 0,l.iframe=void 0,l.dcentWebDeferred=function(){let e,t;const n=new Promise((async function(n,o){e=n,t=o}));return{resolve:e,reject:t,promise:n}},l.dcentWebPromise=l.dcentWebDeferred(),l.dcentException=function(e,t){return{header:{version:"1.0",request_from:"dcent-web",status:"error"},body:{error:{code:e,message:t}}}};let C=null;l.setConnectionListener=function(e){C=e};const m=()=>{l.popupWindow&&(l.popupWindow=void 0,l.popupTab&&(l.popupTab=void 0),l.dcentWebPromise=l.dcentWebDeferred(),_.emit("popUpClosed"),_.removeAllListeners())},w=e=>({header:{version:"1.0",response_from:"api",status:"error"},body:{error:{code:"pop-up_blocked",message:e}}});l.dcentPopupWindow=async function(){try{d.debug("dcent.dcentPopupWindow  called ");if("undefined"!=typeof chrome&&chrome.runtime&&void 0!==chrome.runtime.onConnect){d.debug("create iframe");const e=document.getElementById("dcent-connect");return e&&e.parentNode.removeChild(e),l.iframe=document.createElement("iframe"),l.iframe.src=u.popUpUrl+"/iframe",l.iframe.id="dcent-connect",document.body.appendChild(l.iframe),l.popupWindow=l.iframe.contentWindow,l.popupTab&&(l.popupTab=void 0),null}if(l.popupWindow=window.open("","_blank"),!l.popupWindow)return w("window is not open");d.debug("window.open create dcent.popupWindow opener = ",l.popupWindow.opener),l.popupWindow.location.href=u.popUpUrl}catch(e){return w(e||e.message)}return null},l._call=function(e,t){y({idx:e,event:"BridgeRequest",type:"json",payload:t})};const _=new E.EventEmitter,h=e=>{let t="";return t="Dcent.Event."+e,t};l.call=async function(e){const t=l.messageRequestIdx++;return new Promise(async(n,o)=>{if(!l.popupWindow||l.popupWindow.closed){var r=await l.dcentPopupWindow();null!==r&&o(r)}l.dcentWebPromise.promise.then((async function(){l._call(t,e)}));const a=()=>{o(l.dcentException("pop-up_closed","Pop-up windows has been closed"))},i=setTimeout(()=>{_.removeListener(h(t),s),_.removeListener("popUpClosed",a),o(l.dcentException("time_out","The function execution time has expired"))},f),s=e=>{clearTimeout(i),_.removeListener("popUpClosed",a),d.debug("eventEmitter - emit",e);try{"success"===e.data.payload.header.status||"transaction"===e.data.payload.body.command&&"user_cancel"===e.data.payload.body.error.code?n(e.data.payload):o(e.data.payload)}catch(e){}};_.once("popUpClosed",a),_.once(h(t),s)})};l.messageReceive=function(e){if("BridgeEvent"!==e.data.event&&"BridgeResponse"!==e.data.event||d.debug("messageReceive",e),"BridgeEvent"===e.data.event&&"data"===e.data.type){if("dcent-iframe-init"===e.data.payload)return l.eventSource=e.source,void(()=>{if(d.debug("createDcentTab"),"undefined"==typeof chrome)return;if(void 0!==l.popupTab&&null!==l.popupTab)return;const e=u.popUpUrl+"?_from_extension=true";chrome.windows.getCurrent(null,(function(t){"normal"!==t.type?chrome.windows.create({url:e},(function(e){chrome.tabs.query({windowId:e.id,active:!0},(function(e){d.debug("create window and tab"),l.popupTab=e[0]}))})):chrome.tabs.query({currentWindow:!0,active:!0},(function(t){let n=0;t.length>0&&(n=t[0].index+1),chrome.tabs.create({url:e,index:n},(function(e){l.popupTab=e}))}))}))})();if("popup-success"===e.data.payload)return void l.dcentWebPromise.resolve();if("popup-close"===e.data.payload)return void m();if(("dcent-connected"===e.data.payload||"dcent-disconnected"===e.data.payload)&&C)return void C(e.data.payload)}if("BridgeResponse"!==e.data.event||"json"!==e.data.type)return;const t=e.data.idx||l.messageResponsetIdx++;_.emit(h(t),e)},l.popupWindowClose=function(){if("undefined"!=typeof chrome&&chrome.runtime&&void 0!==chrome.runtime.onConnect){l.popupTab&&l.popupTab.id&&chrome.tabs.remove(l.popupTab.id,()=>{l.popupWindow=void 0,l.popupTab=void 0});const e=document.getElementById("dcent-connect");e&&e.parentNode.removeChild(e),m()}else y({event:"BridgeEvent",type:"data",payload:"popup-close"})};const y=e=>{if(l.popupWindow)try{let t="*";l.iframe&&(t=l.iframe.src.match(/^.+\:\/\/[^\/]+/)[0]),l.popupWindow.postMessage(e,t)}catch(e){}};"undefined"!=typeof window&&(window.addEventListener("message",l.messageReceive,!1),window.addEventListener("beforeunload",l.popupWindowClose));const L=(e,t)=>{if("numberString"===e){if("string"!=typeof t)throw l.dcentException("param_error","Invaild Parameter - "+t);if(-1===t.indexOf("0x",0)){if(/^[0-9]+$/.test(t))return t}else if(0===t.indexOf("0x",0)&&(e=>!!/^(0x)?[0-9a-f]+$/.test(e.toLowerCase()))(t))return t;throw l.dcentException("param_error","Invaild Parameter - - - "+t)}};function v(e){return!(!e||!/^[a-zA-Z\d.!#$%&\+\-_]{2,14}$/.test(e))}function g(e){if(!e)return!1;switch(e.toLowerCase()){case r.BITCOIN.toLowerCase():case r.BITCOIN_TESTNET.toLowerCase():case r.MONACOIN.toLowerCase():case r.MONACOIN_TESTNET.toLowerCase():case r.ERC20.toLowerCase():case r.ERC20_KOVAN.toLowerCase():case r.ETHEREUM.toLowerCase():case r.ETHEREUM_KOVAN.toLowerCase():case r.RRC20.toLowerCase():case r.RRC20_TESTNET.toLowerCase():case r.RSK.toLowerCase():case r.RSK_TESTNET.toLowerCase():case r.KLAYTN.toLowerCase():case r.KLAY_BAOBAB.toLowerCase():case r.KLAYTN_KCT.toLowerCase():case r.KCT_BAOBAB.toLowerCase():case r.RIPPLE.toLowerCase():case r.RIPPLE_TESTNET.toLowerCase():case r.XDC.toLowerCase():case r.XDC_APOTHEM.toLowerCase():case r.XRC20.toLowerCase():case r.XRC20_APOTHEM.toLowerCase():return!0;default:return!1}}function A(e){if(!e)return!1;switch(e.toLowerCase()){case r.ERC20.toLowerCase():case r.ERC20_KOVAN.toLowerCase():case o.RRC20.toLowerCase():case o.RRC20_TESTNET.toLowerCase():case o.KLAYTN_KCT.toLowerCase():case o.KCT_BAOBAB.toLowerCase():case r.XRC20.toLowerCase():case r.XRC20_APOTHEM.toLowerCase():return!0;default:return!1}}l.info=async function(){return await l.call({method:"info"})},l.setTimeOutMs=function(e){if("number"!=typeof e)throw l.dcentException("param_error","timeOutMs is not Number Type");f=e},l.getDeviceInfo=async function(){return await l.call({method:"getDeviceInfo"})},l.setLabel=async function(e){if(!v(e))throw l.dcentException("param_error","Invalid Label : "+e);return await l.call({method:"setLabel",params:{label:e}})},l.syncAccount=async function(e){for(var t=0;t<e.length;t+=1){const n=e[t];if(!g(n.coin_group))throw l.dcentException("coin_group_error","not supported coin group");if(!A(n.coin_group)&&!g(n.coin_name))throw l.dcentException("coin_name_error","not supported coin name");if(!v(n.label))throw l.dcentException("param_error","Invalid Label - "+n.label)}return await l.call({method:"syncAccount",params:{accountInfos:e}})},l.getAccountInfo=async function(){return await l.call({method:"getAccountInfo"})},l.selectAddress=async function(e){if(!Array.isArray(e))throw l.dcentException("param_error","addresses is not array");return await l.call({method:"selectAddress",params:{addresses:e}})},l.getAddress=async function(e,t){if(!function(e){if(!e)return!1;switch(e.toLowerCase()){case o.BITCOIN.toLowerCase():case o.BITCOIN_TESTNET.toLowerCase():case o.MONACOIN.toLowerCase():case o.MONACOIN_TESTNET.toLowerCase():case o.ETHEREUM.toLowerCase():case o.ETHEREUM_KOVAN.toLowerCase():case o.ERC20.toLowerCase():case o.ERC20_KOVAN.toLowerCase():case o.RRC20.toLowerCase():case o.RRC20_TESTNET.toLowerCase():case o.RSK.toLowerCase():case o.RSK_TESTNET.toLowerCase():case o.KLAYTN.toLowerCase():case o.KLAY_BAOBAB.toLowerCase():case o.KLAYTN_KCT.toLowerCase():case o.KCT_BAOBAB.toLowerCase():case o.RIPPLE.toLowerCase():case o.RIPPLE_TESTNET.toLowerCase():case o.XDC.toLowerCase():case o.XDC_APOTHEM.toLowerCase():case o.XRC20.toLowerCase():case o.XRC20_APOTHEM.toLowerCase():return!0;default:return!1}}(e))throw l.dcentException("coin_type_error","not supported coin type");return await l.call({method:"getAddress",params:{coinType:e,path:t}})},l.getXPUB=async function(e,t){return await l.call({method:"getXPUB",params:{key:e,bip32name:t}})},l.getBitcoinTransactionObject=function(e){if(!function(e){switch(e.toLowerCase()){case o.BITCOIN.toLowerCase():case o.BITCOIN_TESTNET.toLowerCase():case o.MONACOIN.toLowerCase():case o.MONACOIN_TESTNET.toLowerCase():return!0;default:return!1}}(e))throw l.dcentException("coin_type_error","not supported coin type");const t={request:{header:{version:"1.0",request_to:""},body:{command:"",parameter:{}}}};return t.request.header.request_to=e,t.request.body.command="transaction",t.request.body.parameter={},t.request.body.parameter.version=1,t.request.body.parameter.locktime=0,t},l.addBitcoinTransactionInput=function(e,t,n,o,r){const a=e.request.body.parameter;return a.input=a.input||[],a.input.push({prev_tx:t,utxo_idx:n,type:o,key:r}),e},l.addBitcoinTransactionOutput=function(e,t,n,o){const r=e.request.body.parameter;return r.output=r.output||[],r.output.push({type:t,value:n,to:o}),e},l.getBitcoinSignedTransaction=async function(e){if(null==e)throw l.dcentException("param_error","transaction object is undefined or null");return d.debug("transaction : ",JSON.stringify(e)),await l.call({method:"getBitcoinSignedTransaction",params:{transaction:e}})},l.getEthereumSignedTransaction=async function(e,t,n,r,a,i,s,c,p){try{t=L("numberString",t),n=L("numberString",n),r=L("numberString",r),i=L("numberString",i)}catch(e){throw e}if("number"!=typeof p)throw l.dcentException("param_error","Invaild Parameter");switch(e.toLowerCase()){case o.ETHEREUM.toLowerCase():case o.ETHEREUM_KOVAN.toLowerCase():case o.RSK.toLowerCase():case o.RSK_TESTNET.toLowerCase():break;case o.XDC.toLowerCase():case o.XDC_APOTHEM.toLowerCase():a=T(a);break;default:throw l.dcentException("coin_type_error","not supported coin type")}return await l.call({method:"getEthereumSignedTransaction",params:{coinType:e,nonce:t,gas_price:n,gas_limit:r,to:a,value:i,data:s,key:c,chain_id:p}})},l.getTokenSignedTransaction=async function(e,t,n,a,i,s,c){try{t=L("numberString",t),n=L("numberString",n),a=L("numberString",a),c.value=L("numberString",c.value)}catch(e){throw e}if("number"!=typeof s||"number"!=typeof c.decimals)throw l.dcentException("param_error","Invaild Parameter");switch(e.toLowerCase()){case o.ERC20.toLowerCase():case o.ERC20_KOVAN.toLowerCase():case o.RRC20.toLowerCase():case o.RRC20_TESTNET.toLowerCase():case r.KLAYTN_KCT.toLowerCase():case r.KCT_BAOBAB.toLowerCase():break;case o.XRC20.toLowerCase():case o.XRC20_APOTHEM.toLowerCase():c.to=T(c.to),c.address=T(c.address);break;default:throw l.dcentException("coin_type_error","not supported token type")}return await l.call({method:"getTokenSignedTransaction",params:{token:e,nonce:t,gas_price:n,gas_limit:a,key:i,chain_id:s,contract:c}})},l.getEthereumSignedMessage=async function(e,t){return await l.call({method:"getEthereumSignedMessage",params:{message:e,key:t}})},l.getKlaytnSignedTransaction=async function(e,t,n,r,a,i,c,p,u,d,T,E,f){try{t=L("numberString",t),n=L("numberString",n),r=L("numberString",r),i=L("numberString",i),f&&(f.decimals=L("numberString",f.decimals))}catch(e){throw e}if("number"!=typeof u)throw l.dcentException("param_error","Invaild Parameter chainId - "+u);switch(e.toLowerCase()){case o.KLAYTN.toLowerCase():case o.KLAY_BAOBAB.toLowerCase():e=o.KLAYTN;break;case o.KLAYTN_KCT.toLowerCase():case o.KCT_BAOBAB.toLowerCase():e=o.KLAYTN_KCT;break;default:throw l.dcentException("coin_type_error","not supported coin type")}if(d||(d=s.LEGACY),!T){const t=await this.getAddress(e,p);t.body.parameter.address&&(T=t.body.parameter.address)}return await l.call({method:"getKlaytnSignedTransaction",params:{coinType:e,nonce:t,gas_price:n,gas_limit:r,to:a,value:i,data:c,key:p,chain_id:u,tx_type:d,from:T,fee_ratio:E,contract:f}})},l.getSignedMessage=async function(e,t,n){return await l.call({method:"getSignedMessage",params:{coinType:e,key:t,message:n}})},l.getSignedData=async function(e,t){return await l.call({method:"getSignedData",params:{key:e,message:t}})},l.getXrpSignedTransaction=async function(e,t){try{if("string"!=typeof e.Account||"string"!=typeof e.TransactionType||"string"!=typeof e.Fee||"number"!=typeof e.Sequence)throw l.dcentException("param_error","TypeError: Required field type is not matched");if(void 0===c[e.TransactionType])throw l.dcentException("param_error","Invalid Transaction Type: "+e.TransactionType);L("numberString",e.Fee)}catch(e){throw e}return await l.call({method:"getXrpSignedTransaction",params:{key:t,transaction:e}})},l.state=p,l.coinType=o,l.coinGroup=r,l.coinName=a,l.bitcoinTxType=i,l.klaytnTxType=s,l.xrpTxType=c;const N=l;e.exports=N,"undefined"!=typeof window&&(window.DcentWebConnector=l,window.DcentWebConnector.state=p,window.DcentWebConnector.coinType=o,window.DcentWebConnector.coinGroup=r,window.DcentWebConnector.coinName=a,window.DcentWebConnector.bitcoinTxType=i,window.DcentWebConnector.klaytnTxType=s)},function(e,t,n){"use strict";e.exports={coinType:{BITCOIN:"bitcoin",BITCOIN_TESTNET:"bitcoin-testnet",ERC20:"erc20",ERC20_KOVAN:"erc20",ETHEREUM:"ethereum",ETHEREUM_KOVAN:"ethereum",KLAYTN:"klaytn",KLAY_BAOBAB:"klaytn-testnet",KLAYTN_KCT:"klaytn-erc20",KCT_BAOBAB:"krc20-testnet",MONACOIN:"monacoin",MONACOIN_TESTNET:"monacoin-testnet",RIPPLE:"ripple",RIPPLE_TESTNET:"",RRC20:"rrc20",RRC20_TESTNET:"rrc20",RSK:"rsk",RSK_TESTNET:"rsk-testnet",XDC:"xinfin",XRC20:"xrc20",XDC_APOTHEM:"xinfin",XRC20_APOTHEM:"xrc20"},coinGroup:{BITCOIN:"BITCOIN",BITCOIN_TESTNET:"BTC-TESTNET",ERC20:"ERC20",ERC20_KOVAN:"ERC20_KOVAN",ETHEREUM:"ETHEREUM",ETHEREUM_KOVAN:"ETH-KOVAN",KLAYTN:"KLAYTN",KLAY_BAOBAB:"KLAYTN-TESTNET",KLAYTN_KCT:"KLAYTN-ERC20",KCT_BAOBAB:"KRC20-TESTNET",MONACOIN:"MONACOIN",MONACOIN_TESTNET:"MONA-TESTNET",RIPPLE:"RIPPLE",RIPPLE_TESTNET:"XRP-TESTNET",RRC20:"RRC20",RRC20_TESTNET:"RRC20-TESTNET",RSK:"RSK",RSK_TESTNET:"RSK-TESTNET",XDC:"XINFIN",XRC20:"XRC20",XDC_APOTHEM:"XDC-APOTHEM",XRC20_APOTHEM:"XRC20-APOTHEM"},coinName:{BITCOIN:"BITCOIN",BITCOIN_TESTNET:"BTC-TESTNET",ERC20:"",ERC20_KOVAN:"",ETHEREUM:"ETHEREUM",ETHEREUM_KOVAN:"ETH-KOVAN",KLAYTN:"KLAYTN",KLAY_BAOBAB:"KLAYTN-TESTNET",KLAYTN_KCT:"",KCT_BAOBAB:"",MONACOIN:"MONACOIN",MONACOIN_TESTNET:"MONA-TESTNET",RIPPLE:"RIPPLE",RIPPLE_TESTNET:"XRP-TESTNET",RRC20:"",RRC20_TESTNET:"",RSK:"RSK",RSK_TESTNET:"RSK-TESTNET",XDC:"XINFIN",XRC20:"",XDC_APOTHEM:"XDC-APOTHEM",XRC20_APOTHEM:""},bitcoinTxType:{change:"change",p2pk:"p2pk",p2pkh:"p2pkh",p2sh:"p2sh",multisig:"multisig",p2wpkh:"p2wpkh",p2wsh:"p2wsh"},klaytnTxType:{LEGACY:255,FEE_PAYER:238,VALUE_TRANSFER:8,FEE_DELEGATED_VALUE_TRANSFER:9,FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO:10,VALUE_TRANSFER_MEMO:16,FEE_DELEGATED_VALUE_TRANSFER_MEMO:17,FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO:18,SMART_CONTRACT_DEPLOY:40,FEE_DELEGATED_SMART_CONTRACT_DEPLOY:41,FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO:42,SMART_CONTRACT_EXECUTION:48,FEE_DELEGATED_SMART_CONTRACT_EXECUTION:49,FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO:50,CANCEL:56,FEE_DELEGATED_CANCEL:57,FEE_DELEGATED_CANCEL_WITH_RATIO:58},xrpTxType:{AccountSet:"AccountSet",AccountDelete:"AccountDelete",CheckCancel:"CheckCancel",CheckCash:"CheckCash",CheckCreate:"CheckCreate",DepositPreauth:"DepositPreauth",EscrowCancel:"EscrowCancel",EscrowCreate:"EscrowCreate",EscrowFinish:"EscrowFinish",OfferCancel:"OfferCancel",OfferCreate:"OfferCreate",Payment:"Payment",PaymentChannelClaim:"PaymentChannelClaim",PaymentChannelCreate:"PaymentChannelCreate",PaymentChannelFund:"PaymentChannelFund",SetRegularKey:"SetRegularKey",SignerListSet:"SignerListSet",TrustSet:"TrustSet"}}},function(e,t){e.exports={state:{CONNECTED:"dcent-connected",DISCONNECTED:"dcent-disconnected"}}},function(e,t,n){"use strict";e.exports={config:{timeOutMs:6e4,popUpUrl:"https://bridge.dcentwallet.com/v2"}}},function(e,t){let n=console.log.bind(console,"[INFO] ");let o=console.log.bind(console,"[DEBUG] ");o=()=>{};const r=console.warn.bind(console,"[WARN] "),a=console.error.bind(console,"[ERROR] "),i=console.warn.bind(console,"[TEST] ");e.exports={test:i,info:n,debug:o,warn:r,error:a,NOT_IMPLEMENTED:function(){var e=(e=>{if(e.indexOf("at ")<0)return e;var t=e.indexOf("at "),n=e.slice(t+3,e.length).split(" "),o=n[0],r=n[1].split(/\\|\//);return r[r.length-1].replace(")","")+":"+o})((new Error).stack.toString().split(/\r\n|\n/)[2]);throw console.log("[NOT_IMPLEMENTED]"+e),new Error("NOT_IMPLEMENTED")}}},function(e,t){e.exports=e=>(e.startsWith("0x")||(e=e.startsWith("xdc")?"0x"+e.substring(3):"0x"+e.address),e)},function(e,t,n){"use strict";var o,r="object"==typeof Reflect?Reflect:null,a=r&&"function"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};o=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var c=10;function p(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function u(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function d(e,t,n,o){var r,a,i,s;if(p(n),void 0===(a=e._events)?(a=e._events=Object.create(null),e._eventsCount=0):(void 0!==a.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),a=e._events),i=a[t]),void 0===i)i=a[t]=n,++e._eventsCount;else if("function"==typeof i?i=a[t]=o?[n,i]:[i,n]:o?i.unshift(n):i.push(n),(r=u(e))>0&&i.length>r&&!i.warned){i.warned=!0;var c=new Error("Possible EventEmitter memory leak detected. "+i.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");c.name="MaxListenersExceededWarning",c.emitter=e,c.type=t,c.count=i.length,s=c,console&&console.warn&&console.warn(s)}return e}function T(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function E(e,t,n){var o={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=T.bind(o);return r.listener=n,o.wrapFn=r,r}function l(e,t,n){var o=e._events;if(void 0===o)return[];var r=o[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):C(r,r.length)}function f(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function C(e,t){for(var n=new Array(t),o=0;o<t;++o)n[o]=e[o];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return c},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");c=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return u(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,r=this._events;if(void 0!==r)o=o&&void 0===r.error;else if(!o)return!1;if(o){var i;if(t.length>0&&(i=t[0]),i instanceof Error)throw i;var s=new Error("Unhandled error."+(i?" ("+i.message+")":""));throw s.context=i,s}var c=r[e];if(void 0===c)return!1;if("function"==typeof c)a(c,this,t);else{var p=c.length,u=C(c,p);for(n=0;n<p;++n)a(u[n],this,t)}return!0},s.prototype.addListener=function(e,t){return d(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return d(this,e,t,!0)},s.prototype.once=function(e,t){return p(t),this.on(e,E(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){return p(t),this.prependListener(e,E(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,o,r,a,i;if(p(t),void 0===(o=this._events))return this;if(void 0===(n=o[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete o[e],o.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,a=n.length-1;a>=0;a--)if(n[a]===t||n[a].listener===t){i=n[a].listener,r=a;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(o[e]=n[0]),void 0!==o.removeListener&&this.emit("removeListener",e,i||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,o;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,a=Object.keys(n);for(o=0;o<a.length;++o)"removeListener"!==(r=a[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(o=t.length-1;o>=0;o--)this.removeListener(e,t[o]);return this},s.prototype.listeners=function(e){return l(this,e,!0)},s.prototype.rawListeners=function(e){return l(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},s.prototype.listenerCount=f,s.prototype.eventNames=function(){return this._eventsCount>0?o(this._events):[]}}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,